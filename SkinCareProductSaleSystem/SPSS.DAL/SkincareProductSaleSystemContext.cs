// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using SPSS.DAL.Models;

namespace SPSS.DAL;

public partial class SkincareProductSaleSystemContext : DbContext
{
    public SkincareProductSaleSystemContext()
    {
    }

    public SkincareProductSaleSystemContext(DbContextOptions<SkincareProductSaleSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderPromotion> OrderPromotions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<SkinTypeQuestion> SkinTypeQuestions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAnswer> UserAnswers { get; set; }

	private string GetConnectionString()
	{
		IConfiguration config = new ConfigurationBuilder()
			 .SetBasePath(Directory.GetCurrentDirectory())
					.AddJsonFile("appsettings.json", true, true)
					.Build();
		var strConn = config["ConnectionStrings:DefaultConnection"];
		return strConn;
	}
	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer(GetConnectionString());

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasOne(d => d.Product).WithMany(p => p.Feedbacks).HasConstraintName("FK_Feedback_Product");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks).HasConstraintName("FK_Feedback_Users");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Users");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails).HasConstraintName("FK_OrderDetails_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails).HasConstraintName("FK_OrderDetails_Product");
        });

        modelBuilder.Entity<OrderPromotion>(entity =>
        {
            entity.HasOne(d => d.Order).WithMany(p => p.OrderPromotions).HasConstraintName("FK_OrderPromotions_Orders");

            entity.HasOne(d => d.Promotion).WithMany(p => p.OrderPromotions).HasConstraintName("FK_OrderPromotions_Promotions");
        });

        modelBuilder.Entity<UserAnswer>(entity =>
        {
            entity.HasOne(d => d.Question).WithMany(p => p.UserAnswers).HasConstraintName("FK_UserAnswer_SkinTypeQuestions");

            entity.HasOne(d => d.User).WithMany(p => p.UserAnswers).HasConstraintName("FK_UserAnswer_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}